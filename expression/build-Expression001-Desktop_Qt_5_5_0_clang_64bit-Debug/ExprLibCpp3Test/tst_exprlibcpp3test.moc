/****************************************************************************
** Meta object code from reading C++ file 'tst_exprlibcpp3test.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.5.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_exprlibcpp3test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.5.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_ExprLibCpp3Test_t {
    QByteArrayData data[34];
    char stringdata0[988];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_ExprLibCpp3Test_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_ExprLibCpp3Test_t qt_meta_stringdata_ExprLibCpp3Test = {
    {
QT_MOC_LITERAL(0, 0, 15), // "ExprLibCpp3Test"
QT_MOC_LITERAL(1, 16, 12), // "initTestCase"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 46, 19), // "testInterpretNumber"
QT_MOC_LITERAL(5, 66, 20), // "testInterpretNumber2"
QT_MOC_LITERAL(6, 87, 27), // "testInterpretPositiveNumber"
QT_MOC_LITERAL(7, 115, 27), // "testInterpretNegativeNumber"
QT_MOC_LITERAL(8, 143, 32), // "testInterpretPositiveAddPositive"
QT_MOC_LITERAL(9, 176, 32), // "testInterpretNegativeAddNegative"
QT_MOC_LITERAL(10, 209, 42), // "testInterpretPositiveAddNegat..."
QT_MOC_LITERAL(11, 252, 42), // "testInterpretPositiveAddNegat..."
QT_MOC_LITERAL(12, 295, 42), // "testInterpretNegativeAddPosit..."
QT_MOC_LITERAL(13, 338, 42), // "testInterpretNegativeAddPosit..."
QT_MOC_LITERAL(14, 381, 42), // "testInterpretPositiveSubPosit..."
QT_MOC_LITERAL(15, 424, 42), // "testInterpretPositiveSubPosit..."
QT_MOC_LITERAL(16, 467, 27), // "testInterpretAddSubRepeated"
QT_MOC_LITERAL(17, 495, 32), // "testInterpretPositiveMulPositive"
QT_MOC_LITERAL(18, 528, 32), // "testInterpretPositiveMulNegative"
QT_MOC_LITERAL(19, 561, 32), // "testInterpretNegativeMulPositive"
QT_MOC_LITERAL(20, 594, 32), // "testInterpretNegativeMulNegative"
QT_MOC_LITERAL(21, 627, 32), // "testInterpretPositiveDivPositive"
QT_MOC_LITERAL(22, 660, 32), // "testInterpretPositiveDivNegative"
QT_MOC_LITERAL(23, 693, 32), // "testInterpretNegativeDivPositive"
QT_MOC_LITERAL(24, 726, 32), // "testInterpretNegativeDivNegative"
QT_MOC_LITERAL(25, 759, 27), // "testInterpretMulDivRepeated"
QT_MOC_LITERAL(26, 787, 21), // "testInterpretVariable"
QT_MOC_LITERAL(27, 809, 30), // "testInterpretUndefinedVariable"
QT_MOC_LITERAL(28, 840, 30), // "testInterpretComplexExpression"
QT_MOC_LITERAL(29, 871, 25), // "testInterpretDivideByZero"
QT_MOC_LITERAL(30, 897, 20), // "testIterateEmptyTree"
QT_MOC_LITERAL(31, 918, 25), // "testIterateSingleNodeTree"
QT_MOC_LITERAL(32, 944, 20), // "testIterate2NodeTree"
QT_MOC_LITERAL(33, 965, 22) // "testIterateComplexTree"

    },
    "ExprLibCpp3Test\0initTestCase\0\0"
    "cleanupTestCase\0testInterpretNumber\0"
    "testInterpretNumber2\0testInterpretPositiveNumber\0"
    "testInterpretNegativeNumber\0"
    "testInterpretPositiveAddPositive\0"
    "testInterpretNegativeAddNegative\0"
    "testInterpretPositiveAddNegativeIsPositive\0"
    "testInterpretPositiveAddNegativeIsNegative\0"
    "testInterpretNegativeAddPositiveIsPositive\0"
    "testInterpretNegativeAddPositiveIsNegative\0"
    "testInterpretPositiveSubPositiveIsPositive\0"
    "testInterpretPositiveSubPositiveIsNegative\0"
    "testInterpretAddSubRepeated\0"
    "testInterpretPositiveMulPositive\0"
    "testInterpretPositiveMulNegative\0"
    "testInterpretNegativeMulPositive\0"
    "testInterpretNegativeMulNegative\0"
    "testInterpretPositiveDivPositive\0"
    "testInterpretPositiveDivNegative\0"
    "testInterpretNegativeDivPositive\0"
    "testInterpretNegativeDivNegative\0"
    "testInterpretMulDivRepeated\0"
    "testInterpretVariable\0"
    "testInterpretUndefinedVariable\0"
    "testInterpretComplexExpression\0"
    "testInterpretDivideByZero\0"
    "testIterateEmptyTree\0testIterateSingleNodeTree\0"
    "testIterate2NodeTree\0testIterateComplexTree"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_ExprLibCpp3Test[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      32,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  174,    2, 0x08 /* Private */,
       3,    0,  175,    2, 0x08 /* Private */,
       4,    0,  176,    2, 0x08 /* Private */,
       5,    0,  177,    2, 0x08 /* Private */,
       6,    0,  178,    2, 0x08 /* Private */,
       7,    0,  179,    2, 0x08 /* Private */,
       8,    0,  180,    2, 0x08 /* Private */,
       9,    0,  181,    2, 0x08 /* Private */,
      10,    0,  182,    2, 0x08 /* Private */,
      11,    0,  183,    2, 0x08 /* Private */,
      12,    0,  184,    2, 0x08 /* Private */,
      13,    0,  185,    2, 0x08 /* Private */,
      14,    0,  186,    2, 0x08 /* Private */,
      15,    0,  187,    2, 0x08 /* Private */,
      16,    0,  188,    2, 0x08 /* Private */,
      17,    0,  189,    2, 0x08 /* Private */,
      18,    0,  190,    2, 0x08 /* Private */,
      19,    0,  191,    2, 0x08 /* Private */,
      20,    0,  192,    2, 0x08 /* Private */,
      21,    0,  193,    2, 0x08 /* Private */,
      22,    0,  194,    2, 0x08 /* Private */,
      23,    0,  195,    2, 0x08 /* Private */,
      24,    0,  196,    2, 0x08 /* Private */,
      25,    0,  197,    2, 0x08 /* Private */,
      26,    0,  198,    2, 0x08 /* Private */,
      27,    0,  199,    2, 0x08 /* Private */,
      28,    0,  200,    2, 0x08 /* Private */,
      29,    0,  201,    2, 0x08 /* Private */,
      30,    0,  202,    2, 0x08 /* Private */,
      31,    0,  203,    2, 0x08 /* Private */,
      32,    0,  204,    2, 0x08 /* Private */,
      33,    0,  205,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void ExprLibCpp3Test::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        ExprLibCpp3Test *_t = static_cast<ExprLibCpp3Test *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->testInterpretNumber(); break;
        case 3: _t->testInterpretNumber2(); break;
        case 4: _t->testInterpretPositiveNumber(); break;
        case 5: _t->testInterpretNegativeNumber(); break;
        case 6: _t->testInterpretPositiveAddPositive(); break;
        case 7: _t->testInterpretNegativeAddNegative(); break;
        case 8: _t->testInterpretPositiveAddNegativeIsPositive(); break;
        case 9: _t->testInterpretPositiveAddNegativeIsNegative(); break;
        case 10: _t->testInterpretNegativeAddPositiveIsPositive(); break;
        case 11: _t->testInterpretNegativeAddPositiveIsNegative(); break;
        case 12: _t->testInterpretPositiveSubPositiveIsPositive(); break;
        case 13: _t->testInterpretPositiveSubPositiveIsNegative(); break;
        case 14: _t->testInterpretAddSubRepeated(); break;
        case 15: _t->testInterpretPositiveMulPositive(); break;
        case 16: _t->testInterpretPositiveMulNegative(); break;
        case 17: _t->testInterpretNegativeMulPositive(); break;
        case 18: _t->testInterpretNegativeMulNegative(); break;
        case 19: _t->testInterpretPositiveDivPositive(); break;
        case 20: _t->testInterpretPositiveDivNegative(); break;
        case 21: _t->testInterpretNegativeDivPositive(); break;
        case 22: _t->testInterpretNegativeDivNegative(); break;
        case 23: _t->testInterpretMulDivRepeated(); break;
        case 24: _t->testInterpretVariable(); break;
        case 25: _t->testInterpretUndefinedVariable(); break;
        case 26: _t->testInterpretComplexExpression(); break;
        case 27: _t->testInterpretDivideByZero(); break;
        case 28: _t->testIterateEmptyTree(); break;
        case 29: _t->testIterateSingleNodeTree(); break;
        case 30: _t->testIterate2NodeTree(); break;
        case 31: _t->testIterateComplexTree(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject ExprLibCpp3Test::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_ExprLibCpp3Test.data,
      qt_meta_data_ExprLibCpp3Test,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *ExprLibCpp3Test::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ExprLibCpp3Test::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_ExprLibCpp3Test.stringdata0))
        return static_cast<void*>(const_cast< ExprLibCpp3Test*>(this));
    return QObject::qt_metacast(_clname);
}

int ExprLibCpp3Test::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 32)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 32;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 32)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 32;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
